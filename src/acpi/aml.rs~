use collections::vec::Vec;

use super::sdt::Sdt;

use nom::{IResult, le_u8, le_u32};

struct SigLength {
    pub sig: u32,
    pub length: u32
}

pub fn parse_aml_table(data: &[u8]) -> Option<&str> {
    match parse_aml(data) {
        IResult::Done(_, o) => Some(o),
        _ => {
            println!("AML Parse error");
            None
        }
    }
}

named!(parse_aml<&str>,
       do_parse!(
           tables: parse_aml_code >>
               (tables)));

named!(parse_aml_code<&str>,
       do_parse!(
           siglength: parse_def_block_header >>
//           many_m_n!(siglength.length as usize - 37, siglength.length as usize - 36, le_u8) >>
               (siglength.sig)));

named!(parse_def_block_header<SigLength>,
       do_parse!(
           le_u32 >>
           length: le_u32 >>
           le_u8,
           le_u8,
           take_str!(
//           many_m_n!(27, 28, le_u8) >>
               (SigLength { sig, length })));
